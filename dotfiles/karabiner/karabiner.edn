{:profiles
 {:babygau {:default true :sim 50 :delay 500 :alone 180 :held 200}}
 ;; Create alias key for `:to`
 :tos {:hyper {:key :left_control :modi {:mandatory [:left_command :left_shift :left_option]}}
       :to-f19 {:key :left_control :modi {:mandatory [:left_option :left_command]}}
       :to-f18 {:key :left_command :modi {:mandatory [:left_shift :left_option]}}
       :to-f17 {:key :left_command :modi {:mandatory [:left_shift :left_control]}}
       :app-switcher {:key :tab :modi [:left_command] :lazy true}}

 :templates {:launch "osascript -e 'tell application \"%s\" to activate'"
             :notify-layout "osascript -e 'display notification \"%s\" with title \"Layout!\"'"
             :notify-yabai "osascript -e 'display notification \"%s\" with title \"Yabai!\"'"
             :notify-superduper "osascript -e 'display notification \"%s\" with title \"Super Duper!\"'"}

 ;; Create layer/mode based on holding keys
 :layers {;; macOS only use from f1 to f12
          ;; Make use of these keys for naming condition purpose
          :f17-layout {:key :f17}
          :f18-layout {:key :f18}
          :f19-layout {:key :f19}}

 ;; Create layer/mode based on key sequences/chords
 :simlayers {:yabai-mode {:key :y}
             ;; Because bsp and stack are complement each other, i don't need
             ;; set :condi to detect its state any more
             :yabai-stack-mode {:key :s}
             :yabai-bsp-mode {:key :b}
             :yabai-float-mode {:key :f :condi ["in-yabai-float-mode" 1]}}

 ;; Main contains multiple manipulators
 :main [{:des "Super Duper: <s-d> init"
         :rules [[[:s :d] ["super-duper-layout" 1]]
                 ;; Ref: https://github.com/narze/dotfiles/blob/master/etc/karabiner.edn
                 ]}
        {:des "Hyper: Capslock to Hyper, Escape when released"
         :rules [[:##caps_lock :hyper nil {:alone   :escape
                                           :afterup [["in-yabai-bsp-mode" 0] ["in-yabai-float-mode" 0] ["in-yabai-stack-mode" 0]]}]
                 [:escape [["in-yabai-bsp-mode" 0] ["in-yabai-stack-mode" 0] ["in-yabai-float-mode" 0]]]]}
        {:des "Hyper: <h/j/k/l> like Vim navigation"
         :rules [[:!!j :down_arrow]
                 [:!!k :up_arrow]
                 [:!!h :left_arrow]
                 [:!!l :right_arrow]]}
        {:des "Hyper: <c/v/u/r> macOS Copy/Paste/Undo/Redo"
         :rules [[:!!c :!Cc]
                 [:!!v :!Cv]
                 [:!!u :!Cz]
                 [:!!r :!CSz]]}
        {:des "Hyper: <'> Yabai quick focus windows"
         :rules [[:!!semicolon "yabai -m query --spaces \\
                                | jq -re '.[] | select(.visible == 1).index' \\
                                | xargs -I{} yabai -m query --windows --space {} \\
                                | jq -sre 'add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id' \\
                                | xargs -I{} yabai -m window --focus {}"]]}
        {:des "Hyper: <n/p> Yabai quick focus spaces"
         :rules [[:!!p "yabai -m space --focus prev"]
                 [:!!n "yabai -m space --focus next"]]}
        {:des "F17/F18/F19: init"
         :rules [[:right_command [:to-f17 ["f17-layout" 1]] nil {:afterup ["f17-layout" 0]}]
                 [:right_option [:to-f18 ["f18-layout" 1]] nil {:afterup ["f18-layout" 0]}]
                 [:right_control [:to-f19 ["f19-layout" 1]] nil {:afterup ["f19-layout" 0]}]
                 [:fn [:to-f18 ["f18-layout" 1]] :keychron {:afterup ["f18-layout" 0]}]]}
        #_{:des "F17/F18/F19: init"
           ;; Make sure you remap right Control/Option/Cmd to F19
           ;; in simple modification mod
           :rules [[:f17 :to-f17]
                   [:f18 :to-f18]
                   [:f19 :to-f19]]}
        {:des "F19: <b/s/f> Yabai bsp layout"
         :rules [:f19-layout
                 [:b ["yabai -m space --layout bsp" [:notify-layout "BSP"]]]
                 [:s ["yabai -m space --layout stack" [:notify-layout "Fullscreen Stack"]]]
                 [:f ["yabai -m space --layout float" [:notify-layout "Float"]]]]}
        {:des "F19: <f> Yabai toggle float window"
         :rules [:f19-layout
                 [:t ["yabai -m window --toggle float && \\
                         /tmp/yabai-restore/$(yabai -m query --windows --window | jq -re '.id').restore \\
                         2>/dev/null || true" [:notify-layout "Float Window"]]]]}
        {:des "F19: <p> Yabai toggle picture in picture"
         :rules [:f19-layout
                 [:p "yabai -m window --toggle sticky && \\
                        yabai -m window --toggle topmost && \\
                        yabai -m window --toggle pip"]]}
        {:des "F19: <o> Yabai toggle topmost window"
         :rules [:f19-layout
                 [:o "yabai -m window --toggle topmost"]]}
        {:des "F19: <o> Yabai toggle sticky window"
         :rules [:f19-layout
                 [:o "yabai -m window --toggle sticky"]]}
        {:des "F19: <left/down/up/right> Yabai resize float window"
         :rules [:f19-layout
                 [:up_arrow "yabai -m window --grid 1:1:0:0:1:1"]
                 [:down_arrow "yabai -m window --grid 8:8:1:1:6:6"]
                 [:left_arrow "yabai -m window --grid 1:2:0:0:1:1"]
                 [:right_arrow "yabai -m window --grid 1:2:1:0:1:1"]]}

        {:des "F19: <1-7> Yabai fast focus spaces"
         :rules [:f19-layout
                 [:1 "yabai -m space --focus 1"]
                 [:2 "yabai -m space --focus 2"]
                 [:3 "yabai -m space --focus 3"]
                 [:4 "yabai -m space --focus 4"]
                 [:5 "yabai -m space --focus 5"]
                 [:6 "yabai -m space --focus 6"]
                 [:7 "yabai -m space --focus 7"]]}
        {:des "F19: <9/0> Yabai send windows and focus to spaces"
         :rules [:f19-layout
                 [:0 "yabai -m window --space next && yabai -m space --focus next"]
                 [:9 "yabai -m window --space prev && yabai -m space --focus prev"]]}
        {:des "F19: <d/c> Yabai create and destroy spaces"
         :rules [:f19-layout
                 ;; Destroy desktop
                 [:d "yabai -m space --destroy"]
                 ;; Create desktop and follow focus
                 [:c "yabai -m space --create && \\
                                  index=$(yabai -m query --spaces --display | jq 'map(select(.\"native-fullscreen\" == 0))[-1].index') && \\
                                  yabai -m space --focus $index"]]}

        {:des "F17: <r> Yabai bsp rotates tree"
         :rules [:f17-layout
                 ;; Rotate tree
                 [:r "yabai -m space --rotate 90"]]}
        {:des "F17: <y> Yabai bsp rotates y-axis"
         :rules [:f17-layout
                 ; Mirror y axis
                 [:y "yabai -m space --mirror y-axis"]]}
        {:des "F17: <x> Yabai bsp rotates x-axis"
         :rules [:f17-layout
                 ;; Mirror x axis
                 [:x "yabai -m space --mirror x-axis"]]}
        {:des "F17: <s> Yabai toggle split vertical/horizontal window"
         :rules [:f17-layout
                 [:s "yabai -m window --toggle split"]]}
        {:des "F17: <j/k> Yabai bsp cycle through windows"
         :rules [:f17-layout
                 [:j "yabai -m window --focus next || yabai -m window --focus first"]
                 [:k "yabai -m window --focus prev || yabai -m window --focus last"]]}
        {:des "F17: <a/s/w/d> Yabai bsp moves west/south/north/east"
         :rules [:f17-layout
                 [:return_or_enter "yabai -m window --warp west"]
                 [:s "yabai -m window --warp south"]
                 [:a "yabai -m window --warp west"]
                 [:w "yabai -m window --warp north"]
                 [:d "yabai -m window --warp east"]]}
        {:des "F18: <j/k> Yabai stack cycle through windows"
         :rules [:f18-layout
                 [:j "yabai -m window --focus stack.prev || yabai -m window --focus stack.last"]
                 [:k "yabai -m window --focus stack.next || yabai -m window --focus stack.first"]]}

        {:des "F18: <a/s/w/d> Yabai stack moves west/south/north/east"
         :rules [:f18-layout
                 [:s "yabai -m window --stack south"]
                 [:a "yabai -m window --stack west"]
                 [:w "yabai -m window --stack north"]
                 [:d "yabai -m window --stack east"]]}
        {:des "F13: take screenshot"
         :rules [[:f13 [:launch "Screenshot.app"]]]}
        {:des "Double tap right Shift key to switch input setting"
         :rules [[:right_shift [:!Oz ["macos-input-source" 0]] ["macos-input-source" 1]]
                 [:right_shift
                  [["macos-input-source" 1] :right_shift]
                  ["macos-input-source" 0]
                  {:delayed {:invoked ["macos-input-source" 0] :canceled ["macos-input-source" 0]} :params {:delay 300}}]]}
        {:des "Double tap Left_shift key to toggle terminal"
         :rules [[:left_shift [:!Tgrave_accent_and_tilde ["vscode-terminal" 0]] [:VSCODE ["vscode-terminal" 1]]]
                 [:left_shift
                  [["vscode-terminal" 1] :left_shift]
                  ["vscode-terminal" 0]
                  {:delayed {:invoked ["vscode-terminal" 0] :canceled ["vscode-terminal" 0]} :params {:delay 300}}]]}]
 :applications {:Terminals ["^com\\.apple\\.Terminal$"
                            "^com\\.googlecode\\.iterm2$"]
                :Finder    ["^com\\.apple\\.finder$"]
                :Debuggers ["^org\\.mozilla\\.firefox$"
                            "^org\\.mozilla\\.firefoxdeveloperedition$"
                            "^com\\.google\\.Chrome$"
                            "^org\\.chromium\\.Chromium$"
                            "^com\\.google\\.Chrome\\.canary$"
                            "^com\\.apple\\.Safari$"
                            "^com\\.microsoft\\.VSCode$"]
                :VSCODE    ["^com\\.microsoft\\.VSCode"]
                :Browsers  ["^org\\.mozilla\\.firefox$"
                            "^org\\.mozilla\\.firefoxdeveloperedition$"
                            "^com\\.google\\.Chrome$"
                            "^org\\.chromium\\.Chromium$"
                            "^com\\.google\\.Chrome\\.canary$"
                            "^com\\.apple\\.Safari$"]
                :Firefoxes ["^org\\.mozilla\\.firefox$"
                            "^org\\.mozilla\\.firefoxdeveloperedition$"]}
 :devices {:keychron [{:vendor_id 1452 :product_id 591}]}
 :input-sources {:us {:input_mode_id ""
                      :input_source_id "com.apple.keylayout.ABC"
                      :language "en"}}
 :simlayer-threshold 50}
